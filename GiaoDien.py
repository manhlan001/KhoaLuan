# Form implementation generated from reading ui file 'GiaoDien.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import re
import sys
import Assembly
import data
import paint
from dict import line_edit_dict, conditon_dict, parse_labels, replace_memory, replace_memory_byte
from Branch import check_branch, memory_branch
import Create_memory
from encoder import Encoder
from decoder import Decoder
COLON_REGEX = re.compile(r"\:")

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1080, 720)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1060, 700))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.tabWidget = QtWidgets.QTabWidget(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        self.CompileButton = QtWidgets.QPushButton(parent=self.tab_1)
        self.CompileButton.setGeometry(QtCore.QRect(270, 10, 111, 51))
        self.CompileButton.setObjectName("CompileButton")
        self.RestarButton = QtWidgets.QPushButton(parent=self.tab_1)
        self.RestarButton.setGeometry(QtCore.QRect(270, 190, 111, 51))
        self.RestarButton.setObjectName("RestarButton")
        self.StepButton = QtWidgets.QPushButton(parent=self.tab_1)
        self.StepButton.setGeometry(QtCore.QRect(270, 130, 111, 51))
        self.StepButton.setObjectName("StepButton")
        self.ImportButton = QtWidgets.QPushButton(parent=self.tab_1)
        self.ImportButton.setGeometry(QtCore.QRect(140, 10, 111, 51))
        self.ImportButton.setObjectName("ImportButton")
        self.ExportButton = QtWidgets.QPushButton(parent=self.tab_1)
        self.ExportButton.setGeometry(QtCore.QRect(10, 10, 111, 51))
        self.ExportButton.setObjectName("ExportButton")
        self.RunButton = QtWidgets.QPushButton(parent=self.tab_1)
        self.RunButton.setGeometry(QtCore.QRect(270, 70, 111, 51))
        self.RunButton.setObjectName("RunButton")
        self.stackedCodeWidget = QtWidgets.QStackedWidget(parent=self.tab_1)
        self.stackedCodeWidget.setGeometry(QtCore.QRect(400, 0, 631, 601))
        self.stackedCodeWidget.setObjectName("stackedCodeWidget")
        self.pageCode_1 = QtWidgets.QWidget()
        self.pageCode_1.setObjectName("pageCode_1")
        self.CodeEditText = QtWidgets.QTextEdit(parent=self.pageCode_1)
        self.CodeEditText.setGeometry(QtCore.QRect(10, 20, 611, 571))
        self.CodeEditText.setObjectName("CodeEditText")
        self.stackedCodeWidget.addWidget(self.pageCode_1)
        self.pageCode_2 = QtWidgets.QWidget()
        self.pageCode_2.setObjectName("pageCode_2")
        self.CodeView = QtWidgets.QTableView(parent=self.pageCode_2)
        self.CodeView.setGeometry(QtCore.QRect(10, 20, 611, 571))
        self.CodeView.setObjectName("CodeView")
        self.CodeView.setShowGrid(False)
        self.CodeView.setGridStyle(QtCore.Qt.PenStyle.NoPen)
        self.CodeView.verticalHeader().setVisible(False)
        self.stackedCodeWidget.addWidget(self.pageCode_2)
        
        self.CompileButton.clicked.connect(self.show_code_view)
        self.RunButton.clicked.connect(self.Check)
        self.RestarButton.clicked.connect(self.Restart)
        self.StepButton.clicked.connect(self.check_next_line)
        self.ImportButton.clicked.connect(self.import_file)
        self.ExportButton.clicked.connect(self.export)
        
        self.formLayoutWidget = QtWidgets.QWidget(parent=self.tab_1)
        self.formLayoutWidget.setGeometry(QtCore.QRect(10, 80, 201, 511))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.Layout_registers = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.Layout_registers.setContentsMargins(10, 10, 10, 0)
        self.Layout_registers.setObjectName("Layout_registers")
        self.r0_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r0_Label.setObjectName("r0_Label")
        self.Layout_registers.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r0_Label)
        self.r1_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r1_Label.setObjectName("r1_Label")
        self.Layout_registers.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r1_Label)
        self.r1_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r1_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r1_LineEdit.setObjectName("r1_LineEdit")
        self.Layout_registers.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r1_LineEdit)
        self.r2_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r2_Label.setObjectName("r2_Label")
        self.Layout_registers.setWidget(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r2_Label)
        self.r2_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r2_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r2_LineEdit.setObjectName("r2_LineEdit")
        self.Layout_registers.setWidget(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r2_LineEdit)
        self.r3_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r3_Label.setObjectName("r3_Label")
        self.Layout_registers.setWidget(3, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r3_Label)
        self.r3_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r3_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r3_LineEdit.setObjectName("r3_LineEdit")
        self.Layout_registers.setWidget(3, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r3_LineEdit)
        self.r4_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r4_Label.setObjectName("r4_Label")
        self.Layout_registers.setWidget(4, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r4_Label)
        self.r4_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r4_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r4_LineEdit.setObjectName("r4_LineEdit")
        self.Layout_registers.setWidget(4, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r4_LineEdit)
        self.r5_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r5_Label.setObjectName("r5_Label")
        self.Layout_registers.setWidget(5, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r5_Label)
        self.r5_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r5_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r5_LineEdit.setObjectName("r5_LineEdit")
        self.Layout_registers.setWidget(5, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r5_LineEdit)
        self.r6_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r6_Label.setObjectName("r6_Label")
        self.Layout_registers.setWidget(6, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r6_Label)
        self.r6_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r6_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r6_LineEdit.setObjectName("r6_LineEdit")
        self.Layout_registers.setWidget(6, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r6_LineEdit)
        self.r7_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r7_Label.setObjectName("r7_Label")
        self.Layout_registers.setWidget(7, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r7_Label)
        self.r7_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r7_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r7_LineEdit.setObjectName("r7_LineEdit")
        self.Layout_registers.setWidget(7, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r7_LineEdit)
        self.r8_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r8_Label.setObjectName("r8_Label")
        self.Layout_registers.setWidget(8, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r8_Label)
        self.r8_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r8_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r8_LineEdit.setObjectName("r8_LineEdit")
        self.Layout_registers.setWidget(8, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r8_LineEdit)
        self.r9_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r9_Label.setObjectName("r9_Label")
        self.Layout_registers.setWidget(9, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r9_Label)
        self.r9_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r9_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r9_LineEdit.setObjectName("r9_LineEdit")
        self.Layout_registers.setWidget(9, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r9_LineEdit)
        self.r10_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r10_Label.setObjectName("r10_Label")
        self.Layout_registers.setWidget(10, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r10_Label)
        self.r10_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r10_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r10_LineEdit.setObjectName("r10_LineEdit")
        self.Layout_registers.setWidget(10, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r10_LineEdit)
        self.r11_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r11_Label.setObjectName("r11_Label")
        self.Layout_registers.setWidget(11, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r11_Label)
        self.r11_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r11_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r11_LineEdit.setObjectName("r11_LineEdit")
        self.Layout_registers.setWidget(11, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r11_LineEdit)
        self.r12_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.r12_Label.setObjectName("r12_Label")
        self.Layout_registers.setWidget(12, QtWidgets.QFormLayout.ItemRole.LabelRole, self.r12_Label)
        self.r12_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r12_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r12_LineEdit.setObjectName("r12_LineEdit")
        self.Layout_registers.setWidget(12, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r12_LineEdit)
        self.sp_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.sp_Label.setObjectName("sp_Label")
        self.Layout_registers.setWidget(13, QtWidgets.QFormLayout.ItemRole.LabelRole, self.sp_Label)
        self.sp_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.sp_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.sp_LineEdit.setObjectName("sp_LineEdit")
        self.Layout_registers.setWidget(13, QtWidgets.QFormLayout.ItemRole.FieldRole, self.sp_LineEdit)
        self.lr_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.lr_Label.setObjectName("lr_Label")
        self.Layout_registers.setWidget(14, QtWidgets.QFormLayout.ItemRole.LabelRole, self.lr_Label)
        self.lr_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.lr_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lr_LineEdit.setObjectName("lr_LineEdit")
        self.Layout_registers.setWidget(14, QtWidgets.QFormLayout.ItemRole.FieldRole, self.lr_LineEdit)
        self.pc_Label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.pc_Label.setObjectName("pc_Label")
        self.Layout_registers.setWidget(15, QtWidgets.QFormLayout.ItemRole.LabelRole, self.pc_Label)
        self.pc_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.pc_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.pc_LineEdit.setObjectName("pc_LineEdit")
        self.Layout_registers.setWidget(15, QtWidgets.QFormLayout.ItemRole.FieldRole, self.pc_LineEdit)
        self.r0_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.r0_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.r0_LineEdit.setObjectName("r0_LineEdit")
        self.Layout_registers.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.r0_LineEdit)
        
        line_edit_dict["r0"] = self.r0_LineEdit
        line_edit_dict["r1"] = self.r1_LineEdit
        line_edit_dict["r2"] = self.r2_LineEdit
        line_edit_dict["r3"] = self.r3_LineEdit
        line_edit_dict["r4"] = self.r4_LineEdit
        line_edit_dict["r5"] = self.r5_LineEdit
        line_edit_dict["r6"] = self.r6_LineEdit
        line_edit_dict["r7"] = self.r7_LineEdit
        line_edit_dict["r8"] = self.r8_LineEdit
        line_edit_dict["r9"] = self.r9_LineEdit
        line_edit_dict["r10"] = self.r10_LineEdit
        line_edit_dict["r11"] = self.r11_LineEdit
        line_edit_dict["r12"] = self.r12_LineEdit
        line_edit_dict["lr"] = self.lr_LineEdit
        line_edit_dict["sp"] = self.sp_LineEdit
        line_edit_dict["pc"] = self.pc_LineEdit

        self.formLayoutWidget_2 = QtWidgets.QWidget(parent=self.tab_1)
        self.formLayoutWidget_2.setGeometry(QtCore.QRect(240, 300, 160, 138))
        self.formLayoutWidget_2.setObjectName("formLayoutWidget_2")
        self.Layout_condition = QtWidgets.QFormLayout(self.formLayoutWidget_2)
        self.Layout_condition.setContentsMargins(10, 10, 10, 10)
        self.Layout_condition.setObjectName("Layout_condition")
        self.n_Label = QtWidgets.QLabel(parent=self.formLayoutWidget_2)
        self.n_Label.setObjectName("n_Label")
        self.Layout_condition.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.n_Label)
        self.n_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget_2)
        self.n_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.n_LineEdit.setObjectName("n_LineEdit")
        self.Layout_condition.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.n_LineEdit)
        self.z_Label = QtWidgets.QLabel(parent=self.formLayoutWidget_2)
        self.z_Label.setObjectName("z_Label")
        self.Layout_condition.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.z_Label)
        self.z_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget_2)
        self.z_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.z_LineEdit.setObjectName("z_LineEdit")
        self.Layout_condition.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.z_LineEdit)
        self.c_Label = QtWidgets.QLabel(parent=self.formLayoutWidget_2)
        self.c_Label.setObjectName("c_Label")
        self.Layout_condition.setWidget(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.c_Label)
        self.c_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget_2)
        self.c_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.c_LineEdit.setObjectName("c_LineEdit")
        self.Layout_condition.setWidget(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.c_LineEdit)
        self.v_Label = QtWidgets.QLabel(parent=self.formLayoutWidget_2)
        self.v_Label.setObjectName("v_Label")
        self.Layout_condition.setWidget(3, QtWidgets.QFormLayout.ItemRole.LabelRole, self.v_Label)
        self.v_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget_2)
        self.v_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.v_LineEdit.setObjectName("v_LineEdit")
        self.Layout_condition.setWidget(3, QtWidgets.QFormLayout.ItemRole.FieldRole, self.v_LineEdit)
        
        conditon_dict["n"] = self.n_LineEdit
        conditon_dict["z"] = self.z_LineEdit
        conditon_dict["c"] = self.c_LineEdit
        conditon_dict["v"] = self.v_LineEdit
        
        self.formLayoutWidget_4 = QtWidgets.QWidget(parent=self.tab_1)
        self.formLayoutWidget_4.setGeometry(QtCore.QRect(240, 470, 161, 80))
        self.formLayoutWidget_4.setObjectName("formLayoutWidget_4")
        self.formLayout_2 = QtWidgets.QFormLayout(self.formLayoutWidget_4)
        self.formLayout_2.setContentsMargins(0, 0, 0, 0)
        self.formLayout_2.setObjectName("formLayout_2")
        self.cpsr_Label = QtWidgets.QLabel(parent=self.formLayoutWidget_4)
        self.cpsr_Label.setObjectName("cpsr_Label")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.cpsr_Label)
        self.cpsr_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget_4)
        self.cpsr_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.cpsr_LineEdit.setObjectName("cpsr_LineEdit")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.cpsr_LineEdit)
        self.spsr_Label = QtWidgets.QLabel(parent=self.formLayoutWidget_4)
        self.spsr_Label.setObjectName("spsr_Label")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.spsr_Label)
        self.spsr_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget_4)
        self.spsr_LineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.spsr_LineEdit.setObjectName("spsr_LineEdit")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.spsr_LineEdit)
        
        self.tabWidget.addTab(self.tab_1, "")
        self.tab_memory = QtWidgets.QWidget()
        self.tab_memory.setObjectName("tab_memory")
        self.groupBox = QtWidgets.QGroupBox(parent=self.tab_memory)
        self.groupBox.setGeometry(QtCore.QRect(940, 0, 91, 591))
        self.groupBox.setObjectName("groupBox")
        self.label_size_memory = QtWidgets.QLabel(parent=self.groupBox)
        self.label_size_memory.setGeometry(QtCore.QRect(0, 30, 81, 41))
        self.label_size_memory.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.CustomContextMenu)
        self.label_size_memory.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_size_memory.setObjectName("label_size_memory")
        self.label_memory_words_per_row = QtWidgets.QLabel(parent=self.groupBox)
        self.label_memory_words_per_row.setGeometry(QtCore.QRect(0, 140, 81, 61))
        self.label_memory_words_per_row.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.CustomContextMenu)
        self.label_memory_words_per_row.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_memory_words_per_row.setObjectName("label_memory_words_per_row")
        self.comboBox_memory_words_per_row = QtWidgets.QComboBox(parent=self.groupBox)
        self.comboBox_memory_words_per_row.setGeometry(QtCore.QRect(10, 210, 71, 22))
        self.comboBox_memory_words_per_row.setObjectName("comboBox_memory_words_per_row")
        self.comboBox_memory_words_per_row.addItem("")
        self.comboBox_memory_words_per_row.addItem("")
        self.comboBox_memory_words_per_row.addItem("")
        self.comboBox_memory_words_per_row.addItem("")
        self.comboBox_size_memory = QtWidgets.QComboBox(parent=self.groupBox)
        self.comboBox_size_memory.setGeometry(QtCore.QRect(10, 80, 71, 25))
        self.comboBox_size_memory.setObjectName("comboBox_size_memory")
        self.comboBox_size_memory.addItem("")
        self.comboBox_size_memory.addItem("")
        self.formLayoutWidget_5 = QtWidgets.QWidget(parent=self.tab_memory)
        self.formLayoutWidget_5.setGeometry(QtCore.QRect(10, 10, 251, 29))
        self.formLayoutWidget_5.setObjectName("formLayoutWidget_5")
        self.formLayout_4 = QtWidgets.QFormLayout(self.formLayoutWidget_5)
        self.formLayout_4.setLabelAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.formLayout_4.setFormAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.formLayout_4.setContentsMargins(0, 0, 0, 0)
        self.formLayout_4.setObjectName("formLayout_4")
        self.Address_search_LineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Address_search_LineEdit.sizePolicy().hasHeightForWidth())
        self.Address_search_LineEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Address_search_LineEdit.setFont(font)
        self.Address_search_LineEdit.setObjectName("Address_search_LineEdit")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.Address_search_LineEdit)
        self.GotoAddr = QtWidgets.QPushButton(parent=self.formLayoutWidget_5)
        self.GotoAddr.setObjectName("GotoAddr")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.GotoAddr)
        self.Addrr_Mem_View = QtWidgets.QTreeView(parent=self.tab_memory)
        self.Addrr_Mem_View.setGeometry(QtCore.QRect(10, 50, 921, 541))
        self.Addrr_Mem_View.setObjectName("Addrr_Mem_View")
        self.tabWidget.addTab(self.tab_memory, "")
        self.gridLayout.addWidget(self.tabWidget, 1, 0, 1, 1)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_2.addWidget(self.scrollArea, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.model_code = QtGui.QStandardItemModel(0, 2)
        self.CodeView.setModel(self.model_code)
        self.CodeView.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
        self.model_code.setHorizontalHeaderLabels(["BreakPoint", "Assembly"])
        
        self.model = QtGui.QStandardItemModel(0, 7)
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model.appendRow([label_address, label_memory])
        
        self.model_2 = QtGui.QStandardItemModel(0, 7)
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_2.appendRow([label_address, label_memory])
        
        self.model_4 = QtGui.QStandardItemModel(0, 7)
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_4.appendRow([label_address, label_memory])
        
        self.model_8 = QtGui.QStandardItemModel(0, 7)
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_8.appendRow([label_address, label_memory])
        
        self.model_byte = QtGui.QStandardItemModel(0, 7)
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_byte.appendRow([label_address, label_memory])
        
        self.model_2_byte = QtGui.QStandardItemModel(0, 7)
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_2_byte.appendRow([label_address, label_memory])
        
        self.model_4_byte = QtGui.QStandardItemModel(0, 7)
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_4_byte.appendRow([label_address, label_memory])
        
        self.model_8_byte = QtGui.QStandardItemModel(0, 7)
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_8_byte.appendRow([label_address, label_memory])
    
        self.Addrr_Mem_View.setColumnWidth(0, 92)
        self.Addrr_Mem_View.setHeaderHidden(True)
        self.Addrr_Mem_View.setFirstColumnSpanned(1, QtCore.QModelIndex(), False)
        self.Addrr_Mem_View.verticalScrollBar().valueChanged.connect(self.on_scroll)
        
        self.current_index = 0
        self.current_index_x2 = 0
        self.current_index_x4 = 0
        self.current_index_x8 = 0
        self.current_index_byte = 0
        self.current_index_x2_byte = 0
        self.current_index_x4_byte = 0
        self.current_index_x8_byte = 0
        self.total_items = 1073741823
        self.items_per_batch = 100
        
        self.load_mem_x1()
        self.load_mem_x2()
        self.load_mem_x4()
        self.load_mem_x8()
        self.load_mem_x1_byte()
        self.load_mem_x2_byte()
        self.load_mem_x4_byte()
        self.load_mem_x8_byte()
        self.check_mem_per_row_option()
        
        delegate = paint.CustomCheckBoxDelegate(self.CodeView)
        self.CodeView.setItemDelegateForColumn(0, delegate)
        
        self.GotoAddr.clicked.connect(self.search_memory)
        self.comboBox_memory_words_per_row.currentIndexChanged.connect(self.check_mem_per_row_option)
        self.comboBox_size_memory.currentIndexChanged.connect(self.check_mem_per_row_option)
    
    def check_mem_per_row_option(self):
        if self.comboBox_size_memory.currentIndex() == 0:
            if self.comboBox_memory_words_per_row.currentIndex() == 0:
                self.Addrr_Mem_View.setModel(self.model)
                self.Addrr_Mem_View.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
            if self.comboBox_memory_words_per_row.currentIndex() == 1:
                self.Addrr_Mem_View.setModel(self.model_2)
                self.Addrr_Mem_View.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
            if self.comboBox_memory_words_per_row.currentIndex() == 2:
                self.Addrr_Mem_View.setModel(self.model_4)
                self.Addrr_Mem_View.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
            if self.comboBox_memory_words_per_row.currentIndex() == 3:
                self.Addrr_Mem_View.setModel(self.model_8)
                self.Addrr_Mem_View.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
        if self.comboBox_size_memory.currentIndex() == 1:
            if self.comboBox_memory_words_per_row.currentIndex() == 0:
                self.Addrr_Mem_View.setModel(self.model_byte)
                self.Addrr_Mem_View.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
            if self.comboBox_memory_words_per_row.currentIndex() == 1:
                self.Addrr_Mem_View.setModel(self.model_2_byte)
                self.Addrr_Mem_View.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
            if self.comboBox_memory_words_per_row.currentIndex() == 2:
                self.Addrr_Mem_View.setModel(self.model_4_byte)
                self.Addrr_Mem_View.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
            if self.comboBox_memory_words_per_row.currentIndex() == 3:
                self.Addrr_Mem_View.setModel(self.model_8_byte)
                self.Addrr_Mem_View.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
    def load_mem_x1(self):
        for i in range(self.current_index, min(self.current_index + self.items_per_batch, self.total_items)):
            addr = QtGui.QStandardItem(format(i * 4, '08x'))
            addr.setFlags(addr.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            addr.setBackground(QtGui.QColor("#00FFFF"))
            mem_1 = QtGui.QStandardItem('aaaaaaaa')
            mem_1.setFlags(mem_1.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model.appendRow([addr, mem_1])
        self.current_index += self.items_per_batch
    def load_mem_x1_byte(self):
        for i in range(self.current_index_byte, min(self.current_index_byte + self.items_per_batch, self.total_items)):
            addr = QtGui.QStandardItem(format(i * 4, '08x'))
            addr.setFlags(addr.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            addr.setBackground(QtGui.QColor("#00FFFF"))
            mem_1 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_1.setFlags(mem_1.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model_byte.appendRow([addr, mem_1])
        self.current_index_byte += self.items_per_batch
    def load_mem_x2(self):
        for i in range(self.current_index_x2, min(self.current_index_x2 + self.items_per_batch, self.total_items)):
            addr = QtGui.QStandardItem(format(i * 8, '08x'))
            addr.setFlags(addr.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            addr.setBackground(QtGui.QColor("#00FFFF"))
            mem_1 = QtGui.QStandardItem('aaaaaaaa')
            mem_1.setFlags(mem_1.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_2 = QtGui.QStandardItem('aaaaaaaa')
            mem_2.setFlags(mem_2.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model_2.appendRow([addr, mem_1, mem_2])
        self.current_index_x2 += self.items_per_batch
    def load_mem_x2_byte(self):
        for i in range(self.current_index_x2_byte, min(self.current_index_x2_byte + self.items_per_batch, self.total_items)):
            addr = QtGui.QStandardItem(format(i * 8, '08x'))
            addr.setFlags(addr.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            addr.setBackground(QtGui.QColor("#00FFFF"))
            mem_1 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_1.setFlags(mem_1.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_2 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_2.setFlags(mem_2.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model_2_byte.appendRow([addr, mem_1, mem_2])
        self.current_index_x2_byte += self.items_per_batch
    def load_mem_x4(self):
        for i in range(self.current_index_x4, min(self.current_index_x4 + self.items_per_batch, self.total_items)):
            addr = QtGui.QStandardItem(format(i * 16, '08x'))
            addr.setFlags(addr.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            addr.setBackground(QtGui.QColor("#00FFFF"))
            mem_1 = QtGui.QStandardItem('aaaaaaaa')
            mem_1.setFlags(mem_1.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_2 = QtGui.QStandardItem('aaaaaaaa')
            mem_2.setFlags(mem_2.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_3 = QtGui.QStandardItem('aaaaaaaa')
            mem_3.setFlags(mem_3.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_4 = QtGui.QStandardItem('aaaaaaaa')
            mem_4.setFlags(mem_4.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model_4.appendRow([addr, mem_1, mem_2, mem_3, mem_4])
        self.current_index_x4 += self.items_per_batch
    def load_mem_x4_byte(self):
        for i in range(self.current_index_x4_byte, min(self.current_index_x4_byte + self.items_per_batch, self.total_items)):
            addr = QtGui.QStandardItem(format(i * 16, '08x'))
            addr.setFlags(addr.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            addr.setBackground(QtGui.QColor("#00FFFF"))
            mem_1 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_1.setFlags(mem_1.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_2 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_2.setFlags(mem_2.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_3 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_3.setFlags(mem_3.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_4 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_4.setFlags(mem_4.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model_4_byte.appendRow([addr, mem_1, mem_2, mem_3, mem_4])
        self.current_index_x4_byte += self.items_per_batch
    def load_mem_x8(self):
        for i in range(self.current_index_x8, min(self.current_index_x8 + self.items_per_batch, self.total_items)):
            addr = QtGui.QStandardItem(format(i * 32, '08x'))
            addr.setFlags(addr.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            addr.setBackground(QtGui.QColor("#00FFFF"))
            mem_1 = QtGui.QStandardItem('aaaaaaaa')
            mem_1.setFlags(mem_1.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_2 = QtGui.QStandardItem('aaaaaaaa')
            mem_2.setFlags(mem_2.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_3 = QtGui.QStandardItem('aaaaaaaa')
            mem_3.setFlags(mem_3.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_4 = QtGui.QStandardItem('aaaaaaaa')
            mem_4.setFlags(mem_4.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_5 = QtGui.QStandardItem('aaaaaaaa')
            mem_5.setFlags(mem_5.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_6 = QtGui.QStandardItem('aaaaaaaa')
            mem_6.setFlags(mem_6.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_7 = QtGui.QStandardItem('aaaaaaaa')
            mem_7.setFlags(mem_7.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_8 = QtGui.QStandardItem('aaaaaaaa')
            mem_8.setFlags(mem_8.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model_8.appendRow([addr, mem_1, mem_2, mem_3, mem_4, mem_5, mem_6, mem_7, mem_8])
        self.current_index_x8 += self.items_per_batch
    def load_mem_x8_byte(self):
        for i in range(self.current_index_x8_byte, min(self.current_index_x8_byte + self.items_per_batch, self.total_items)):
            addr = QtGui.QStandardItem(format(i * 32, '08x'))
            addr.setFlags(addr.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            addr.setBackground(QtGui.QColor("#00FFFF"))
            mem_1 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_1.setFlags(mem_1.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_2 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_2.setFlags(mem_2.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_3 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_3.setFlags(mem_3.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_4 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_4.setFlags(mem_4.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_5 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_5.setFlags(mem_5.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_6 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_6.setFlags(mem_6.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_7 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_7.setFlags(mem_7.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            mem_8 = QtGui.QStandardItem('aa' + " " + 'aa' + " " + 'aa' + " " + 'aa')
            mem_8.setFlags(mem_8.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model_8_byte.appendRow([addr, mem_1, mem_2, mem_3, mem_4, mem_5, mem_6, mem_7, mem_8])
        self.current_index_x8_byte += self.items_per_batch
    def on_scroll(self, value):
        max_scroll = self.Addrr_Mem_View.verticalScrollBar().maximum()
        if value >= max_scroll and self.current_index < self.total_items:
            self.load_mem_x1()
            self.load_mem_x2()
            self.load_mem_x4()
            self.load_mem_x8()
            self.load_mem_x1_byte()
            self.load_mem_x2_byte()
            self.load_mem_x4_byte()
            self.load_mem_x8_byte()
    def search_memory(self):
        self.reset_search_memory(self.model)
        self.reset_search_memory(self.model_2)
        self.reset_search_memory(self.model_4)
        self.reset_search_memory(self.model_8)
        self.reset_search_memory(self.model_byte)
        self.reset_search_memory(self.model_2_byte)
        self.reset_search_memory(self.model_4_byte)
        self.reset_search_memory(self.model_8_byte)
        
        self.highlight_search_memory(self.model)
        self.highlight_search_memory(self.model_2)
        self.highlight_search_memory(self.model_4)
        self.highlight_search_memory(self.model_8)
        self.highlight_search_memory(self.model_byte)
        self.highlight_search_memory(self.model_2_byte)
        self.highlight_search_memory(self.model_4_byte)
        self.highlight_search_memory(self.model_8_byte)
    def reset_search_memory(self, model):
        for row in range(1, model.rowCount()):
            for col in range(1, model.columnCount()):
                if model.item(row, col):
                    model.item(row, col).setBackground(QtGui.QColor("white"))
    def highlight_search_memory(self, model):
        search_text = self.Address_search_LineEdit.text()
        if search_text:
            found = False
            search_value  = int(search_text, 16)
            while not found and self.current_index > 0:
                max_row = model.rowCount() - 1
                for row in range(1, model.rowCount()):
                    item_addr = model.item(row, 0)
                    if row != max_row:
                        item_addr_next = model.item(row + 1, 0)
                        addr_next = item_addr_next.text()
                    if item_addr:
                        addr = item_addr.text()
                    if search_value == int(addr, 16):
                        model.item(row, 1).setBackground(QtGui.QColor("yellow"))
                        break
                    if addr_next and search_value > int(addr, 16) and search_value < int(addr_next, 16):
                        num = int((search_value - int(addr, 16)) / 4) + 1
                        model.item(row, num).setBackground(QtGui.QColor("yellow"))
                        break
                    if not addr_next and search_value > int(addr, 16):
                        num = int((search_value - int(addr, 16)) / 4) + 1
                        model.item(row, num).setBackground(QtGui.QColor("yellow"))
                        break
                if not found:
                    last_item_value = int(model.item(model.rowCount() - 1, 0).text(), 16)
                    if search_value < last_item_value:
                        break
                    self.load_mem_x1()
                    self.load_mem_x2()
                    self.load_mem_x4()
                    self.load_mem_x8()
                    self.load_mem_x1_byte()
                    self.load_mem_x2_byte()
                    self.load_mem_x4_byte()
                    self.load_mem_x8_byte()
        
    def show_code_edit(self):
        self.stackedCodeWidget.setCurrentIndex(0)

    have_compile = False
    def show_code_view(self):
        text = self.CodeEditText.toPlainText()
        if not text:
            QtWidgets.QMessageBox.critical(None, "Lỗi", "Không có câu lệnh nào")
            return
        if self.have_compile:
            return
        lines = text.split("\n")
        lines, data_lines = data.parse_data(lines)
        labels, lines_clean = parse_labels(lines)
        lines = [item for item in lines if item not in [" ", None]]
        lines = [' '.join(item.split()) for item in lines if item.strip()]
        lines_clean = [item for item in lines_clean if item not in [" ", None]]
        lines_clean = [' '.join(item.split()) for item in lines_clean if item.strip()]
        for index, line in enumerate(lines_clean, start=1):
            pc_binary = format(self.pc, '08x')
            self.address.append(pc_binary)
            self.pc += self.instruction_size
        self.data_labels, data_address, data_memory = data.process_data(data_lines, self.address)
        if data_address:
            self.address.extend(data_address)
        for index, line in enumerate(lines_clean, start=1):
            memory_line = Create_memory.check_memory(self, line, self.address, lines_clean, self.data_labels)
            if memory_line:
                int_memory_line = Decoder(memory_line)
                memory_line = format(int_memory_line, '08x')
                self.memory_current_line.append(memory_line)
            memory_line_branch = memory_branch(self, line, lines_clean, self.address, labels)
            if memory_line_branch:
                int_memory_line_branch = Decoder(memory_line_branch)
                memory_line_branch = format(int_memory_line_branch, '08x')
                self.memory_current_line.append(memory_line_branch)
        if data_memory:
            self.memory_current_line.extend(data_memory)
        replace_memory(self.model, self.address, self.memory_current_line)
        replace_memory(self.model_2, self.address, self.memory_current_line)
        replace_memory(self.model_4, self.address, self.memory_current_line)
        replace_memory(self.model_8, self.address, self.memory_current_line)
        replace_memory_byte(self.model_byte, self.address, self.memory_current_line)
        replace_memory_byte(self.model_2_byte, self.address, self.memory_current_line)
        replace_memory_byte(self.model_4_byte, self.address, self.memory_current_line)
        replace_memory_byte(self.model_8_byte, self.address, self.memory_current_line)
        for line in lines:
            if not line.endswith(':'):
                item1 = QtGui.QStandardItem()
                item1.setCheckable(True)
                item1.setCheckState(QtCore.Qt.CheckState.Unchecked)
                item2 = QtGui.QStandardItem("  " + line)
            if line.endswith(':'):
                item1 = QtGui.QStandardItem(line.upper())
                item2 = QtGui.QStandardItem(" ")
            item1.setFlags(QtCore.Qt.ItemFlag.ItemIsEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable)
            item2.setFlags(item2.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
            self.model_code.appendRow([item1, item2])
        self.CodeView.setColumnWidth(0, 100)
        self.CodeView.setColumnWidth(1, 472)
        item = self.model_code.item(0, 1)
        item.setBackground(QtGui.QColor("Yellow"))
        self.stackedCodeWidget.setCurrentIndex(1)
        self.have_compile = True
    
    bkpt = []
    def Code_BreakPoint(self):
        for row in range(self.model_code.rowCount()):
            item_checkbox = self.model_code.item(row, 0)  # First column
            item_line = self.model_code.item(row, 1)      # Second column
            if item_checkbox.isCheckable() and item_checkbox.checkState() == QtCore.Qt.CheckState.Checked:
                line = item_line.text().strip()
                self.bkpt.append(line)
                    
    def reset_backgroud_register(self):
        self.r0_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r1_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r2_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r3_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r4_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r5_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r6_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r7_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r8_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r9_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r10_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r11_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r12_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.sp_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.lr_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.pc_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.n_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.z_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.c_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.v_LineEdit.setStyleSheet("background-color: white; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.CompileButton.setText(_translate("MainWindow", "Compile"))
        self.RestarButton.setText(_translate("MainWindow", "Restart"))
        self.StepButton.setText(_translate("MainWindow", "Step"))
        self.RunButton.setText(_translate("MainWindow", "Run"))
        self.r0_Label.setText(_translate("MainWindow", "r0"))
        self.r0_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r0_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r1_Label.setText(_translate("MainWindow", "r1"))
        self.r1_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r1_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r2_Label.setText(_translate("MainWindow", "r2"))
        self.r2_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r2_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r3_Label.setText(_translate("MainWindow", "r3"))
        self.r3_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r3_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r4_Label.setText(_translate("MainWindow", "r4"))
        self.r4_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r4_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r5_Label.setText(_translate("MainWindow", "r5"))
        self.r5_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r5_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r6_Label.setText(_translate("MainWindow", "r6"))
        self.r6_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r6_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r7_Label.setText(_translate("MainWindow", "r7"))
        self.r7_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r7_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r8_Label.setText(_translate("MainWindow", "r8"))
        self.r8_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r8_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r9_Label.setText(_translate("MainWindow", "r9"))
        self.r9_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r9_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r10_Label.setText(_translate("MainWindow", "r10"))
        self.r10_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r10_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r11_Label.setText(_translate("MainWindow", "r11"))
        self.r11_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r11_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.r12_Label.setText(_translate("MainWindow", "r12"))
        self.r12_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.r12_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.sp_Label.setText(_translate("MainWindow", "sp"))
        self.sp_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.sp_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.lr_Label.setText(_translate("MainWindow", "lr"))
        self.lr_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.lr_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.pc_Label.setText(_translate("MainWindow", "pc"))
        self.pc_LineEdit.setText(_translate("MainWindow", format(0, '08x')))
        self.pc_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.n_Label.setText(_translate("MainWindow", "N"))
        self.n_LineEdit.setText(_translate("MainWindow", "0"))
        self.n_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.z_Label.setText(_translate("MainWindow", "Z"))
        self.z_LineEdit.setText(_translate("MainWindow", "0"))
        self.z_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.c_Label.setText(_translate("MainWindow", "C"))
        self.c_LineEdit.setText(_translate("MainWindow", "0"))
        self.c_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.v_Label.setText(_translate("MainWindow", "V"))
        self.v_LineEdit.setText(_translate("MainWindow", "0"))
        self.v_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.cpsr_Label.setText(_translate("MainWindow", "cpsr"))
        self.cpsr_LineEdit.setText(_translate("MainWindow", "00000000"))
        self.cpsr_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.spsr_Label.setText(_translate("MainWindow", "spsr"))
        self.spsr_LineEdit.setText(_translate("MainWindow", "00000000"))
        self.spsr_LineEdit.setStyleSheet("font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
        self.ImportButton.setText(_translate("MainWindow", "Import"))
        self.ExportButton.setText(_translate("MainWindow", "Export"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_1), _translate("MainWindow", "Editor"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_memory), _translate("MainWindow", "Memory"))
        self.Address_search_LineEdit.setText(_translate("MainWindow", "00000000"))
        self.GotoAddr.setText(_translate("MainWindow", "Go to Address"))
        self.groupBox.setTitle(_translate("MainWindow", "Option"))
        self.label_size_memory.setText(_translate("MainWindow", "Size\n"
"Memory:"))
        self.label_memory_words_per_row.setText(_translate("MainWindow", "Memory\n"
"words\n"
"per row:"))
        self.comboBox_memory_words_per_row.setItemText(0, _translate("MainWindow", "1"))
        self.comboBox_memory_words_per_row.setItemText(1, _translate("MainWindow", "2"))
        self.comboBox_memory_words_per_row.setItemText(2, _translate("MainWindow", "4"))
        self.comboBox_memory_words_per_row.setItemText(3, _translate("MainWindow", "8"))
        self.comboBox_memory_words_per_row.setCurrentIndex(0)
        self.comboBox_size_memory.setItemText(0, _translate("MainWindow", "Word"))
        self.comboBox_size_memory.setItemText(1, _translate("MainWindow", "Byte"))
        self.label.setText(_translate("MainWindow", "ARMv7-M instruction set simulator"))
        
    pc = 0
    instruction_size = 4
    address = []
    current_line_index = 0
    row = []
    
    def Check(self):
        if self.stackedCodeWidget.currentIndex() == 0:
            QtWidgets.QMessageBox.critical(None, "Lỗi", "Vui lòng Compile code")
            return
        global pc
        memory = []
        text = self.CodeEditText.toPlainText()
        if not text:
            QtWidgets.QMessageBox.critical(None, "Lỗi", "Không có câu lệnh nào")
            return
        lines = text.split("\n")
        lines, data_lines = data.parse_data(lines)
        labels, lines = parse_labels(lines)
        lines = [item for item in lines if item not in ["", None]]
        lines = [' '.join(item.split()) for item in lines if item.strip()]
        mapping = {key: value for key, value in zip(self.address, lines)}
        self.Code_BreakPoint()
        while self.current_line_index < len(lines):
            line = mapping.get(self.address[self.current_line_index])
            if line.strip() in self.bkpt:
                break
            self.reset_backgroud_register()
            self.reset_highlight()
            pc_binary = self.address[self.current_line_index]
            self.pc_LineEdit.setText(pc_binary)
            if line.strip():
                label, flag_B = check_branch(self, line, self.address, lines)
                reg, arguments, flag_N, flag_Z, flag_C, flag_V, flag_T = Assembly.check_assembly_line(self, line, self.address, self.memory_current_line, self.data_labels
                                                                                                      , self.model, self.model_2, self.model_4, self.model_8
                                                                                                      , self.model_byte, self.model_2_byte, self.model_4_byte, self.model_8_byte)
                self.current_line_index += 1
            elif not line.strip():
                QtWidgets.QMessageBox.critical(None, "Lỗi", "Không có câu lệnh nào")
                break
            if label in labels:
                position = lines.index(labels[label][0])
                self.current_line_index = position
            elif label in lines:
                position = lines.index(label)
                self.current_line_index = position
            elif label != None:
                QtWidgets.QMessageBox.critical(None, "Lỗi", "Không tìm thấy label: " + label + " trong chương trình")
                break
            if self.current_line_index >= len(lines):
                self.reset_highlight()
            else:
                next_line = mapping.get(self.address[self.current_line_index])
                self.highlight_next_line(next_line)
            if arguments and len(reg) == 1 and len(arguments) == 1:
                line_edit = line_edit_dict.get(reg[0])
                result_int = int(arguments[0], 2)
                result_str = format(result_int, '08x')
                line_edit.setText(result_str)
                line_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            elif arguments and len(reg) == 2 and len(arguments) == 2:
                line_edit_1 = line_edit_dict.get(reg[0])
                result_int_1 = int(arguments[0], 2)
                result_str_1 = format(result_int_1, '08x')
                line_edit_1.setText(result_str_1)
                line_edit_1.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
                line_edit_2 = line_edit_dict.get(reg[1])
                result_int_2 = int(arguments[1], 2)
                result_str_2 = format(result_int_2, '08x')
                line_edit_2.setText(result_str_2)
                line_edit_2.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            elif arguments is None and (flag_T or self.current_line_index == len(self.address)):
                pass
            elif flag_B:
                pass
            elif arguments is None:
                QtWidgets.QMessageBox.critical(None, "Lỗi", "Lệnh " + "[" + line + "]"+ " không hợp lệ")
                break
            n_edit = conditon_dict.get("n")
            z_edit = conditon_dict.get("z")
            c_edit = conditon_dict.get("c")
            v_edit = conditon_dict.get("v")
            n_edit.setText(flag_N)
            z_edit.setText(flag_Z)
            c_edit.setText(flag_C)
            v_edit.setText(flag_V)
            if flag_N == '1':
                n_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            if flag_Z == '1':
                z_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            if flag_C == '1':
                c_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            if flag_V == '1':
                v_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
                    
    memory_current_line = []
    data_labels = []
    def reset_highlight(self):
        for row in range(self.model_code.rowCount()):
            for column in range(self.model_code.columnCount()):
                item = self.model_code.item(row, column)
                if item != None:
                    item.setBackground(QtGui.QColor("white"))
    def highlight_next_line(self, line):
        self.reset_highlight()
        row_count = self.model_code.rowCount()
        text = self.CodeEditText.toPlainText()
        if not text:
            QtWidgets.QMessageBox.critical(None, "Lỗi", "Không có câu lệnh nào")
            return
        lines = text.split("\n")
        lines, _ = data.parse_data(lines)
        lines = [item for item in lines if item not in [" ", None]]
        lines = [' '.join(item.split()) for item in lines if item.strip()]
        self.row = [i for i in range(row_count)]
        highlight = {key: value for key, value in zip(lines, self.row)}
        if line in lines:
            index = highlight.get(line)
            item = self.model_code.item(index, 1)
            item.setBackground(QtGui.QColor("Yellow"))
            
    def check_next_line(self):
        if self.stackedCodeWidget.currentIndex() == 0:
            QtWidgets.QMessageBox.critical(None, "Lỗi", "Vui lòng Compile code")
            return
        global current_line_index
        text = self.CodeEditText.toPlainText()
        if not text:
            QtWidgets.QMessageBox.critical(None, "Lỗi", "Không có câu lệnh nào")
            return
        lines = text.split("\n")
        lines, data_lines = data.parse_data(lines)
        labels, lines = parse_labels(lines)
        lines = [item for item in lines if item not in ["", None]]
        mapping = {key: value for key, value in zip(self.address, lines)}
        if self.current_line_index < len(lines):
            self.reset_backgroud_register()
            self.reset_highlight()
            pc_binary = self.address[self.current_line_index]
            self.pc_LineEdit.setText(pc_binary)
            current_line = lines[self.current_line_index]
            if current_line.strip():
                label, flag_B = check_branch(self, current_line, self.address, lines)
                reg, arguments, flag_N, flag_Z, flag_C, flag_V, flag_T = Assembly.check_assembly_line(self, current_line, self.address, self.memory_current_line, self.data_labels
                                                                                                      , self.model, self.model_2, self.model_4, self.model_8
                                                                                                      , self.model_byte, self.model_2_byte, self.model_4_byte, self.model_8_byte)
                self.current_line_index += 1
            if label in labels:
                position = lines.index(labels[label][0])
                self.current_line_index = position
            elif label != None:
                position = lines.index(label)
                self.current_line_index = position
            if self.current_line_index >= len(lines):
                self.reset_highlight()
            else:
                next_line = mapping.get(self.address[self.current_line_index])
                self.highlight_next_line(next_line)
            if arguments and len(reg) == 1 and len(arguments) == 1:
                line_edit = line_edit_dict.get(reg[0])
                result_int = int(arguments[0], 2)
                result_str = format(result_int, '08x')
                line_edit.setText(result_str)
                line_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            elif arguments and len(reg) == 2 and len(arguments) == 2:
                line_edit_1 = line_edit_dict.get(reg[0])
                result_int_1 = int(arguments[0], 2)
                result_str_1 = format(result_int_1, '08x')
                line_edit_1.setText(result_str_1)
                line_edit_1.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
                line_edit_2 = line_edit_dict.get(reg[1])
                result_int_2 = int(arguments[1], 2)
                result_str_2 = format(result_int_2, '08x')
                line_edit_2.setText(result_str_2)
                line_edit_2.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            elif arguments is None and (flag_T or self.current_line_index == len(lines)):
                pass
            elif flag_B:
                pass
            elif arguments is None or flag_B == None:
                QtWidgets.QMessageBox.critical(None, "Lỗi", "Lệnh " + "[" + current_line + "]"+ " không hợp lệ")
                return
            n_edit = conditon_dict.get("n")
            z_edit = conditon_dict.get("z")
            c_edit = conditon_dict.get("c")
            v_edit = conditon_dict.get("v")
            n_edit.setText(flag_N)
            z_edit.setText(flag_Z)
            c_edit.setText(flag_C)
            v_edit.setText(flag_V)
            if flag_N == '1':
                n_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            if flag_Z == '1':
                z_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            if flag_C == '1':
                c_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")
            if flag_V == '1':
                v_edit.setStyleSheet("background-color: yellow; font-family: 'Open Sans', Verdana, Arial, sans-serif; font-size: 16px;")

    def Restart(self):
        self.address = []
        self.memory_current_line = []
        self.show_code_edit()
        self.reset_backgroud_register()
        self.reset_highlight()
        self.r0_LineEdit.setText(format(0, '08x'))
        self.r1_LineEdit.setText(format(0, '08x'))
        self.r2_LineEdit.setText(format(0, '08x'))
        self.r3_LineEdit.setText(format(0, '08x'))
        self.r4_LineEdit.setText(format(0, '08x'))
        self.r5_LineEdit.setText(format(0, '08x'))
        self.r6_LineEdit.setText(format(0, '08x'))
        self.r7_LineEdit.setText(format(0, '08x'))
        self.r8_LineEdit.setText(format(0, '08x'))
        self.r9_LineEdit.setText(format(0, '08x'))
        self.r10_LineEdit.setText(format(0, '08x'))
        self.r11_LineEdit.setText(format(0, '08x'))
        self.r12_LineEdit.setText(format(0, '08x'))
        self.sp_LineEdit.setText(format(0, '08x'))
        self.lr_LineEdit.setText(format(0, '08x'))
        self.pc = 0
        self.pc_LineEdit.setText(format(0, '08x'))
        self.current_line_index = 0
        self.n_LineEdit.setText("0")
        self.z_LineEdit.setText("0")
        self.c_LineEdit.setText("0")
        self.v_LineEdit.setText("0")
        self.model.clear()
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model.appendRow([label_address, label_memory])
        self.model_2.clear()
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_2.appendRow([label_address, label_memory])
        self.model_4.clear()
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_4.appendRow([label_address, label_memory])
        self.model_8.clear()
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_8.appendRow([label_address, label_memory])
        self.model_byte.clear()
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_byte.appendRow([label_address, label_memory])
        self.model_2_byte.clear()
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_2_byte.appendRow([label_address, label_memory])
        self.model_4_byte.clear()
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_4_byte.appendRow([label_address, label_memory])
        self.model_8_byte.clear()
        label_address = QtGui.QStandardItem('Address')
        label_address.setFlags(label_address.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        label_memory = QtGui.QStandardItem('Memory')
        label_memory.setFlags(label_memory.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        self.model_8_byte.appendRow([label_address, label_memory])
        self.current_index = 0
        self.current_index_x2 = 0
        self.current_index_x4 = 0
        self.current_index_x8 = 0
        self.current_index_byte = 0
        self.current_index_x2_byte = 0
        self.current_index_x4_byte = 0
        self.current_index_x8_byte = 0
        self.load_mem_x1()
        self.load_mem_x2()
        self.load_mem_x4()
        self.load_mem_x8()
        self.load_mem_x1_byte()
        self.load_mem_x2_byte()
        self.load_mem_x4_byte()
        self.load_mem_x8_byte()
        self.Address_search_LineEdit.setText(format(0, '08x'))
        self.row = []
        self.bkpt = []
        self.have_compile = False
        self.model_code.clear()
        self.model_code.setHorizontalHeaderLabels(["BreakPoint", "Assembly"])
        
    def export(self):
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", "", "Text Files (*.txt);;Assembly Files (*.s)")
        if file_path:
            try:
                file_content = self.CodeEditText.toPlainText()
                with open(file_path, 'w') as file:
                    file.write(file_content)
                file_name = file_path.split('/')[-1]
                QtWidgets.QMessageBox.information(None, "Success", f"Đã lưu file {file_name} thành công ")
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Error", f"Lưu file {file_path}\n{e} thất bại, vui lòng kiểm tra lại")
        
    def import_file(self):
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Import File", "", "Assembly Files (*.s);;Text Files (*.txt)")
        if file_path:
            try:
                with open(file_path, 'r') as file:
                    file_content = file.read()
                self.CodeEditText.setPlainText(file_content)
                file_name = file_path.split('/')[-1]  
                QtWidgets.QMessageBox.information(None, "Success", f"Đã thêm file {file_name} thành công ")
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Error", f"Mở file {file_name}\n{e} thất bại, vui lòng kiểm tra lại")
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
